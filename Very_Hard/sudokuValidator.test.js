const path = require("path");
const filePath = `./${path
  .basename(__filename)
  .split(".")[0]
  .toString()}.js`;
const file = require(`${filePath}`);

describe(__filename, () => {
  test.each`
    a                                                                                                                                                                                                                                                                        | expected
    ${[[1, 5, 2, 4, 8, 9, 3, 7, 6], [7, 3, 9, 2, 5, 6, 8, 4, 1], [4, 6, 5, 3, 7, 1, 2, 9, 8], [3, 8, 7, 1, 2, 4, 6, 5, 9], [8, 9, 1, 7, 6, 3, 4, 2, 5], [2, 4, 6, 5, 9, 8, 7, 1, 3], [9, 1, 4, 6, 3, 7, 5, 8, 2], [6, 2, 8, 9, 4, 5, 1, 3, 7], [5, 7, 3, 8, 1, 2, 9, 6, 4]]} | ${false}
    ${[[1, 5, 2, 4, 8, 9, 3, 7, 6], [7, 3, 9, 2, 5, 6, 8, 4, 1], [4, 6, 8, 3, 7, 1, 2, 9, 5], [3, 8, 7, 1, 2, 4, 6, 5, 9], [5, 9, 1, 7, 6, 3, 4, 2, 8], [2, 4, 6, 8, 9, 5, 7, 1, 3], [9, 1, 4, 6, 3, 7, 5, 8, 2], [6, 2, 5, 9, 4, 8, 1, 3, 7], [8, 7, 3, 5, 1, 2, 9, 6, 4]]} | ${true}
    ${[[8, 2, 7, 1, 5, 4, 3, 9, 6], [9, 6, 5, 3, 2, 7, 1, 4, 8], [3, 4, 1, 6, 8, 9, 7, 5, 2], [5, 9, 3, 4, 6, 8, 2, 7, 1], [4, 7, 2, 5, 1, 3, 6, 8, 9], [6, 1, 8, 9, 7, 2, 4, 3, 5], [7, 8, 6, 2, 3, 5, 9, 1, 4], [1, 5, 4, 7, 9, 6, 8, 2, 3], [2, 3, 9, 8, 4, 1, 5, 6, 7]]} | ${true}
    ${[[8, 2, 7, 1, 5, 4, 3, 9, 6], [9, 6, 5, 3, 2, 7, 1, 4, 8], [3, 4, 1, 6, 8, 9, 7, 5, 2], [5, 9, 3, 4, 6, 8, 2, 7, 1], [4, 7, 2, 5, 1, 5, 6, 8, 9], [6, 1, 8, 9, 7, 2, 4, 3, 5], [7, 8, 6, 2, 3, 5, 9, 1, 4], [1, 5, 4, 7, 9, 6, 8, 2, 3], [2, 3, 9, 8, 4, 1, 5, 6, 7]]} | ${false}
    ${[[1, 5, 2, 4, 8, 9, 3, 7, 6], [3, 3, 9, 2, 5, 6, 8, 4, 1], [4, 6, 8, 3, 7, 1, 2, 9, 5], [3, 8, 7, 1, 2, 4, 6, 5, 9], [5, 9, 1, 7, 6, 3, 4, 2, 8], [2, 4, 6, 8, 9, 5, 7, 1, 3], [9, 1, 4, 6, 3, 7, 5, 8, 2], [6, 2, 5, 9, 4, 8, 1, 3, 7], [8, 7, 3, 5, 1, 2, 9, 6, 4]]} | ${false}
    ${[[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]]} | ${true}
    ${[[1, 5, 2, 4, 6, 9, 3, 7, 8], [7, 8, 9, 2, 1, 3, 4, 5, 6], [4, 3, 6, 5, 8, 7, 2, 9, 1], [6, 1, 3, 8, 7, 2, 5, 4, 9], [9, 7, 4, 1, 5, 6, 8, 2, 3], [8, 2, 5, 9, 3, 4, 1, 6, 7], [5, 6, 7, 3, 4, 8, 9, 1, 2], [2, 4, 8, 6, 9, 1, 7, 3, 5], [3, 9, 1, 7, 2, 5, 6, 8, 4]]} | ${true}
    ${[[2, 5, 1, 4, 6, 9, 3, 7, 8], [7, 8, 9, 2, 1, 3, 4, 5, 6], [4, 3, 6, 5, 8, 7, 2, 9, 1], [6, 1, 3, 8, 7, 2, 5, 4, 9], [9, 7, 4, 1, 5, 6, 8, 2, 3], [8, 2, 5, 9, 3, 4, 1, 6, 7], [5, 6, 7, 3, 4, 8, 9, 1, 2], [2, 4, 8, 6, 9, 1, 7, 3, 5], [3, 9, 1, 7, 2, 5, 6, 8, 4]]} | ${false}
    ${[[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 2, 9, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]]} | ${false}
    ${[[1, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [5, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]]} | ${false}
  `(
    "returns $expected when calling with the following param/s: a",
    ({ a, expected }) => {
      expect(file.solution(a)).toStrictEqual(expected);
    }
  );
});
